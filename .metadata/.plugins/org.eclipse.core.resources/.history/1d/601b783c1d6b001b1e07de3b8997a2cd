package br.com.alura.microservice.auth;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;
import org.springframework.security.oauth2.provider.token.TokenStore;
import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;

@Configuration
public class AuthorizationServerConfigurer extends AuthorizationServerConfigurerAdapter{
	
	private final DataSource dataSource;
	
	private final SecurityProperties securityProperties;
	
	@Autowired
	private AuthenticationManager authenticationManager;
	
	@Autowired
	private UserDetailsService userDetailsService;
	
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	private JwtAccessTokenConverter jwtAccessTokenConverter;
    private TokenStore tokenStore;
    
    public AuthorizationServerConfigurer(final DataSource dataSource, final PasswordEncoder passwordEncoder,
            final AuthenticationManager authenticationManager, final SecurityProperties securityProperties,
            final UserDetailsService userDetailsService) {
			this.dataSource = dataSource;
			this.passwordEncoder = passwordEncoder;
			this.authenticationManager = authenticationManager;
			this.securityProperties = securityProperties;
			this.userDetailsService = userDetailsService;
}
    @Bean
    public TokenStore tokenStore() {
        if (tokenStore == null) {
            tokenStore = new JwtTokenStore(jwtAccessTokenConverter());
        }
        return tokenStore;
    }
	@Override
	public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
		
		//autenticar a loja ao subir o ambiente
		clients.inMemory()
			.withClient("loja")
			.secret(passwordEncoder.encode("lojapwd"))
			.authorizedGrantTypes("password")
			.scopes("web", "mobile");
	}
	
	@Override
	public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
		endpoints.authenticationManager(authenticationManager)
			.userDetailsService(detailsService);
	}
}
